#The return statement has a print function to check for accuracy.

def fizzArray2(n):
    a = []
    for i in range(n):
        a.append(str(i))
    return a

def no14(nums):
    return 1 not in nums or 4 not in nums

def isEverywhere(nums,val):
    for i in range(len(nums)-1):
        if nums[i] != val and nums[i+1] != val:
            return print(False)
    return print(True)
    
def either24(nums):
    found2 = False
    found4 = False
    for i in range(len(nums)-1):
        if nums[i] == 2 and nums[i+1] == 2:
            found2 = True
        elif nums[i] == 4 and nums[i+1] == 4:
            found4 = True
    if found2 and found4:
        return print(False)
    elif not found2 and not found4:
        return print(False)
    else:
        return print(True)
    
def matchUp(nums1,nums2):
    count = 0
    for i in range(len(nums1)):
        if (abs(nums1[i] - nums2[i]) <= 2) and nums1[i] != nums2[i] :
            count+=1
    return print(count)

def has77(nums):
    for i in range(len(nums)-1):
        if nums[i] == 7 and nums[i+1] == 7:
            return print(True)
        elif i + 2 < len(nums):
            if nums[i] == 7 and nums[i+2] == 7:
                return print(True)
    return print(False)

def has12(nums):
    for i in range(len(nums)):
        if nums[i] == 1:
            for j in range(i+1,len(nums)):
                if nums[j] == 2:
                    return print(True)
    return print(False)

def modThree(nums):
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            if i+1 and i+2 < len(nums):
                if nums[i+1] % 2 == 0 and nums[i+2] % 2 == 0:
                    return print(True)

        elif i + 1 and i + 2 < len(nums):
            if nums[i + 1] % 2 ==1 and nums[i + 2] % 2 == 1:
                return print(True)
    return print(False)
    
def haveThree(nums):
    count = 0
    if nums[0] == 3:
        count+=1
    if nums[-1] == 3:
        count+=1
    for i in range(1,len(nums)-1):
        if nums[i] == 3:
            count+=1
            if (nums[i-1] == 3 or nums [i+1] == 3):
                return print(False)
    return print(count == 3)


def twoTwo(nums):
    for i in range(len(nums)):
        if nums[i] == 2:
            if i + 1 < len(nums) and nums[i+1] == 2:
                continue
            elif i > 0 and nums[i-1] == 2:
                continue
            else:
                return print(False)
    return print(True)
    
def sameEnds(nums,leng):

    for i in range(leng):
        if nums[i] == nums[len(nums)-leng+i]:
            continue
        else:
            return print(False)
    return print(True)

def tripleUp(nums):
    for i in range(len(nums)-2):
        temp = nums[i]
        if nums[i+1] == temp+1 and nums[i+2] == temp+2:
            return print(True)
    return print(False)
   
def shiftLeft(nums):
    if len(nums) == 0:
        return print([])
    a = []
    for i in range(1,len(nums)):
        a.append(nums[i])
    a.append(nums[0])
    return print(a)
    
def tenRun(nums):
    for i in range(len(nums)):
        if nums[i] % 10 == 0:
            for j in range(i+1,len(nums)):
                if nums[j] % 10 != 0:
                    nums[j] = nums[i]
                if nums[j] % 10 == 0:
                    break

    return print(nums)
    
def pre4(nums):
    b = []
    for i in range(len(nums)):
        if nums[i] == 4:
            for j in range(0,i):
                b.append(nums[j])
            break
    return print(b)
    
def post4(nums):
    b = []

    for i in range(len(nums)-1,-1,-1):
        if nums[i] == 4:
            for j in range(i+1,len(nums)):
                b.append(nums[j])
            break
    return print(b)
    
def notAlone(nums, val):
    for i in range(len(nums)):
        if nums[i] == val and i-1 >= 0 and i+1 < len(nums):
            if nums[i] != nums[i-1] and nums[i] != nums[i+1]:
                if nums[i-1] > nums[i+1]:
                    nums[i] = nums[i-1]
                else:
                    nums[i] = nums[i+1]
    return print(nums)
 
 def zeroFront(nums):
    zeros = nums.count(0)
    count = 0
    b = []
    while count < zeros:
        b.append(0)
        count+=1

    for i in range(len(nums)):
        if nums[i] == 0:
            continue
        b.append(nums[i])
    return print(b)
   
def withoutTen(nums):
    a = []
    count = 0
    for i in range(len(nums)):
        if nums[i] == 10:
            count += 1
            continue
        a.append(nums[i])

    zeros = 0
    while zeros < count:
        a.append(0)
        zeros+=1
    return print(a)
    
def zeroMax(nums):
    for i in range(len(nums)-1):
        if nums[i] == 0:
            maxOdd = 0
            for j in range(i+1,len(nums)):
                if nums[j] % 2 == 1 and nums[j] > maxOdd:
                    maxOdd = nums[j]
            nums[i] = maxOdd

    return print(nums)
def evenOdd(nums):
    b = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            b.append(nums[i])
    for i in range(len(nums)):
        if nums[i] % 2 == 1:
            b.append(nums[i])
    return print(b)

def fizzBuzz(start,end):
    b = []
    for i in range(start,end):
        if i % 3 == 0 and i % 5 == 0:
            b.append("FizzBuzz")
        elif i%5 == 0:
            b.append("Buzz")
        elif i % 3== 0:
            b.append("Fizz")
        else:
            b.append(str(i))
    return print(b)

